import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import matplotlib
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False
matplotlib.rcParams['font.size'] = 12
# 2. 数据准备
data = { "区域": ["珠三角", "粤东", "粤西", "粤北"], "地区生产总值（亿元）": [115365.14, 8601.39, 9541.55, 8125.73], "规模以上工业增加值增长（%）": [4.8, -4.3, -0.2, 6.6], "固定资产投资增长（%）": [-4.3, -5.2, -3.4, -5.5], "社会消费品零售总额增长（%）": [0.7, 0.1, 0.9, 0.0], "地方一般公共预算收入增长（%）": [-2.3, 5.4, 4.6, -1.3]
}
df = pd.DataFrame(data)
# 3. 特征选择（排除地区和 GDP 总量）
features = df.columns[2:]
X = df[features]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)
print("="*50)
print("各主成分方差解释率:", pca.explained_variance_ratio_)
print("总方差保留比例:", np.sum(pca.explained_variance_ratio_))
print("="*50)
print("主成分特征权重:")
for i, component in enumerate(pca.components_):
print(f"PC{i+1}:")
for j, weight in enumerate(component):
print(f" {features[j]}: {weight:.3f}")
print("="*50)
plt.figure(figsize=(10, 8))
colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']
for i, (region, color) in enumerate(zip(df["区域"], colors)):
plt.scatter(X_pca[i, 0], X_pca[i, 1], color=color, s=300,
label=region, edgecolors='black', linewidth=1.5)
plt.text(X_pca[i, 0]+0.05, X_pca[i, 1]+0.05, region, fontsize=12, weight='bold')
for j, feature in enumerate(features):
plt.arrow(0, 0, pca.components_[0, j]*2, pca.components_[1, j]*2, color='gray', alpha=0.7, head_width=0.1, linestyle='--')
plt.text(pca.components_[0, j]*2.2, pca.components_[1, j]*2.2, feature, color='black', fontsize=10, weight='bold')
plt.axhline(0, color='gray', linestyle='--', alpha=0.5)
plt.axvline(0, color='gray', linestyle='--', alpha=0.5)
plt.xlabel(f"第一主成分 PC1 ({pca.explained_variance_ratio_[0]*100:.1f}%)", fontsize=12)
plt.ylabel(f"第二主成分 PC2 ({pca.explained_variance_ratio_[1]*100:.1f}%)", fontsize=12)
plt.title("广东省四大区域经济指标 PCA 分析（2024）", fontsize=14, pad=20)
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.savefig('guangdong_pca_analysis.png', dpi=300, bbox_inches='tight')
print("可视化结果已保存为: guangdong_pca_analysis.png")
plt.show()
